name: pandoc.yml â€“ Create documents

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4.2.2

    - name: Set up Pandoc
      run: |
        sudo apt-get install -y pandoc context

    - name: Initialize directories
      run: mkdir -p output

    - name: Check Pandoc version
      id: version
      run: |
        PANDOC_VERSION=$(pandoc --version | head -1 | cut -d' ' -f2 | cut -d'.' -f1)
        if [ "$PANDOC_VERSION" -eq "2" ]; then
          echo "::set-output name=smart_flag;-smart"
        else
          echo "::set-output name=smart_flag;--smart"
        fi

    - name: Build PDF
      run: |
        for f in markdown/*.md; do
          FILE_NAME=$(basename "$f" | sed 's/.md//g')
          pandoc --standalone \ # --template styles/chmduquesne.tex \
            --from markdown --to context \
            --variable papersize=letter \
            --output output/${FILE_NAME}.tex $f
          mtxrun --path=output --result=${FILE_NAME}.pdf --script context ${FILE_NAME}.tex
          git add ${FILE_NAME}.pdf
        done

    - name: Build DOCX
      run: |
        for f in markdown/*.md; do
          FILE_NAME=$(basename "$f" | sed 's/.md//g')
          pandoc --standalone ${{ steps.version.outputs.smart_flag }} $f --output output/${FILE_NAME}.docx
          git add output/${FILE_NAME}.docx
        done

    - name: Build RTF
      run: |
        for f in markdown/*.md; do
          FILE_NAME=$(basename "$f" | sed 's/.md//g')
          pandoc --standalone ${{ steps.version.outputs.smart_flag }} $f --output output/${FILE_NAME}.rtf
          git add output/${FILE_NAME}.rtf
        done

    - name: Check in documents 
      run : |
        git commit -m "[docs](doc): adding output to GitHub"

    - name: Upload output
      uses: actions/upload-artifact@v4.5.0
      with:
        name: output
        path: output
